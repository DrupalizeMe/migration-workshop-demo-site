<?php

/**
 * @file
 * Provides a UI for creating and managing custom
 * order types.
 */

/**
 * Implements hook_menu().
 */
function commerce_order_types_menu() {
  $items = array();

  $items['admin/commerce/config/order-types'] = array(
    'title' => 'Order Types',
    'description' => 'Manage and create order types',
    'page callback' => 'commerce_order_types_order_types_overview',
    'access arguments' => array('administer order types'),
  );

  $items['admin/commerce/config/order-types/add'] = array(
    'title' => 'Add order type',
    'description' => 'Add additional commerce order types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_types_order_type_form', array()),
    'access arguments' => array('administer order types'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (commerce_order_types_order_types(TRUE) as $type => $order_type) {
    if (isset($order_type['module']) && $order_type['module'] == 'commerce_order_types') {
      // Convert underscores to hyphens for the menu item argument.
      $type_arg = strtr($type, '_', '-');

      $items['admin/commerce/config/order-types/' . $type_arg . '/edit'] = array(
        'title' => 'Edit',
        'access arguments' => array('administer order types'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
      );
      $items['admin/commerce/config/order-types/' . $type_arg . '/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'commerce_order_types_order_type_delete_form_wrapper',
        'page arguments' => array($type),
        'access arguments' => array('administer order types'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
      );
    }
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_order_types_menu_alter(&$items) {
  foreach (commerce_order_types_order_types() as $type => $order_type) {
    if (isset($order_type['module']) && $order_type['module'] == 'commerce_order_types') {
      // Convert underscores to hyphens for the menu item argument.
      $type_arg = strtr($type, '_', '-');
      // Add the order admin screens.
      if (module_exists('commerce_order_ui')) {
        $items['admin/commerce/orders/add/' . $type_arg] = array(
          'title' => $order_type['name'],
          'page callback' => 'commerce_order_ui_order_form_wrapper',
          'page arguments' => array(commerce_order_new(0, NULL, $type)),
          'access callback' => 'commerce_order_access',
          'access arguments' => array('create'),
          'file' => 'includes/commerce_order_ui.orders.inc',
          'file path' => drupal_get_path('module', 'commerce_order_ui'),
        );
      }

      $items['admin/commerce/config/order-types/' . $type_arg] = array(
        'title' => $order_type['name'],
        'page callback' => 'commerce_order_types_order_type_form_wrapper',
        'page arguments' => array($type),
        'access arguments' => array('administer order types'),
      );

      $items['admin/commerce/config/order-types/' . $type_arg . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
      $items['admin/commerce/config/order-types/' . $type_arg . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_order_types_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/orders/add' on 'admin/commerce/orders'.
  if ($root_path == 'admin/commerce/orders') {
    foreach (commerce_order_types_order_types() as $type => $order_type) {
      $type_arg = strtr($type, '_', '-');
      $item = menu_get_item('admin/commerce/orders/add/' . $type_arg);
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_order_types_entity_info_alter(&$entity_info) {
  foreach (commerce_order_types_order_types() as $type => $order_type) {
    $type_arg = strtr($type, '_', '-');
    $entity_info['commerce_order']['bundles'][$type] = array(
      'label' => $order_type['name'],
      'admin' => array(
        'path' => 'admin/commerce/config/order-types/' . $type_arg,
        'access arguments' => array('administer order types'),
      ),
    );
  }
}

/**
 * Implements hook_help().
 */
function commerce_order_types_help($path, $arg) {
  // Display the order type's help on the order add page.
  if (strpos($path, 'admin/commerce/orders/add') === 0) {
    $type = $arg[4];
    $order_type = commerce_order_types_order_type_load($type);
    $help = $order_type['help'];

    if (!empty($help)) {
      return '<p>' . filter_xss_admin($help) . '</p>';
    }
  }
}

/**
 * Implements hook_permission().
 */
function commerce_order_types_permission() {
  return array(
    'administer order types' => array(
      'title' => t('Administer order types'),
      'description' => t('Create new order types and configure fields for them.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_order_types_form_commerce_order_settings_form_alter(&$form, &$form_state) {
  // Change the description of the order settings form for accuracy.
  $form['commerce_order_help_text']['#description'] = t('Supply an optional help message to be displayed above the order add form on all order types.');
}

/**
 * Menu callback.
 *
 * Displays the order type admin overview page.
 */
function commerce_order_types_order_types_overview() {
  $types = commerce_order_types_order_types();
  $field_ui = module_exists('field_ui');
  $header = array(t('Name'), array(
      'data' => t('Operations'),
      'colspan' => $field_ui ? '4' : '2',
    ));
  $rows = array();

  foreach ($types as $type => $order_type) {
    $row = array();
    $row[] = check_plain($order_type['name']);
    $type_arg = strtr($type, '_', '-');
    $row[] = array('data' => l(t('edit'), 'admin/commerce/config/order-types/' . $type_arg . '/edit'));

    if ($field_ui) {
      $row[] = array('data' => l(t('manage fields'), 'admin/commerce/config/order-types/' . $type_arg . '/fields'));
      $row[] = array('data' => l(t('manage display'), 'admin/commerce/config/order-types/' . $type_arg . '/display'));
    }
    $row[] = array('data' => l(t('delete'), 'admin/commerce/config/order-types/' . $type_arg . '/delete'));

    $rows[] = $row;
  }

  // Output a render array.
  $build['order_types'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No custom order types available. <a href="@link">Add order type</a>.', array('@link' => url('admin/commerce/config/order-types/add'))),
  );

  return $build;
}

/**
 * Return a blank, new commerce order type.
 */
function commerce_order_types_order_type_new() {
  return array(
    'type' => '',
    'name' => '',
    'help' => '',
  );
}

/**
 * Form callback wrapper: create or edit an order type.
 *
 * @param string $type
 *   The machine-name of the order type being created or edited by this form
 *     or a full order type array.
 */
function commerce_order_types_order_type_form_wrapper($type) {
  if (is_array($type)) {
    $order_type = $type;
  }
  else {
    $order_type = commerce_order_types_order_type_load($type);
  }

  // Not allow to alter any code provided order type.
  if (!isset($order_type['module']) || $order_type['module'] <> 'commerce_order_types') {
    return t('This order type cannot be edited because it is not defined by the Custom Order Types module.');
  }

  return drupal_get_form('commerce_order_types_order_type_form', $order_type);
}

/**
 * Form callback - comfirmation form for deleting an order type.
 *
 * @param string $type
 *   The machine-readable name of the order type
 */
function commerce_order_types_order_type_delete_form_wrapper($type) {
  if (is_array($type)) {
    $order_type = $type;
  }
  else {
    $order_type = commerce_order_types_order_type_load($type);
  }

  // Not allowed to delete any code provided order type.
  if (!isset($order_type['module']) || $order_type['module'] <> 'commerce_order_types') {
    return t('This order type cannot be deleted because it is not defined by the Commerce Order Types module.');
  }

  // Don't allow deletion of order types that have orders.
  if (($count = db_query("SELECT order_id FROM {commerce_order} WHERE type = :order_type", array(':order_type' => $order_type['type']))->rowCount()) > 0) {
    drupal_set_title(t('Cannot delete the %name order type', array('%name' => $order_type['name'])), PASS_THROUGH);
    return format_plural($count,
      'There is 1 order of this type. It cannot be deleted.',
      'There are @count orders of this type. It cannot be deleted.'
    );
  }

  return drupal_get_form('commerce_order_types_order_type_delete_form', $order_type);
}

/**
 * Form callback: confirmation form for deleting a line item type.
 *
 * @param array $order_type
 *   The order type array to be deleted.
 *
 * @see confirm_form()
 */
function commerce_order_types_order_type_delete_form($form, &$form_state, $order_type) {
  $form_state['order_type'] = $order_type;

  $form['#submit'][] = 'commerce_order_types_order_type_delete_form_submit';

  $form = confirm_form($form,
    t('Are you sure you want to delete the %name order type?', array('%name' => $order_type['name'])),
    'admin/commerce/config/order-types',
    '<p>' . t('This action cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submit callback for commerce_order_types_order_type_delete_form().
 */
function commerce_order_types_order_type_delete_form_submit($form, &$form_state) {
  $order_type = $form_state['order_type'];

  commerce_order_types_order_type_delete($order_type['type']);

  drupal_set_message(t('The order type %name has been deleted.', array('%name' => $order_type['name'])));
  watchdog('commerce_order', 'Deleted order type %name.', array('%name' => $order_type['name']), WATCHDOG_NOTICE);

  $form_state['redirect'] = 'admin/commerce/config/order-types';
}

/**
 * Order type create/edit form.
 *
 * @param array $order_type
 *   The order type array to edit or for a create for an empty type
 *     array with properties instantiated but not populated.
 */
function commerce_order_types_order_type_form($form, &$form_state, $order_type = array()) {
  if (empty($order_type)) {
    $order_type = commerce_order_types_order_type_new();
  }

  $form_state['order_type'] = $order_type;

  $form['order_type'] = array(
    '#tree' => TRUE,
  );

  $form['order_type']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Order type name'),
    '#default_value' => $order_type['name'],
    '#description' => t('The human-readable name of this order type. It is recommended that this name begin with a capital letter and contain only letters, numbers, and spaces. This name must be unique.'),
    '#required' => TRUE,
    '#size' => 32,
  );

  if (empty($order_type['type'])) {
    $form['order_type']['type'] = array(
      '#type' => 'machine_name',
      '#title' => t('Machine name'),
      '#default_value' => $order_type['type'],
      '#maxlength' => 32,
      '#required' => TRUE,
      '#machine_name' => array(
        'exists' => 'commerce_order_types_order_type_load',
        'source' => array('order_type', 'name'),
      ),
      '#description' => t('The machine-readable name of this order type. This name must contain only lowercase letters, numbers, and underscores, it must be unique.'),
    );
  }

  $form['order_type']['help'] = array(
    '#type' => 'textarea',
    '#title' => t('Order creation help text'),
    '#description' => t('Supply an optional help message to be displayed above the order add form.'),
    '#default_value' => $order_type['help'],
    '#rows' => 5,
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 40,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save order type'),
    '#submit' => array('commerce_order_types_order_type_form_submit'),
  );

  return $form;
}

/**
 * Form submit handler: save an order type.
 */
function commerce_order_types_order_type_form_submit(&$form, &$form_state) {
  $order_type = $form_state['order_type'];
  $updated = !empty($order_type['type']);

  // If a type is set, we should still check to see if a row for the type exists
  // in the database; this is done to accomodate types defined by Features.
  if ($updated) {
    $updated = db_query('SELECT 1 FROM {commerce_order_types_order_types} WHERE type = :type', array(':type' => $order_type['type']))->fetchField();
  }

  foreach ($form_state['values']['order_type'] as $key => $value) {
    $order_type[$key] = $value;
  }

  // Write the order type to the database.
  $order_type['is_new'] = !$updated;
  commerce_order_types_commerce_order_type_save($order_type);

  // Add default fields to the order type.
  commerce_order_configure_order_type($order_type['type']);

  drupal_set_message(t('Order type saved.'));

  $form_state['redirect'] = 'admin/commerce/config/order-types';


}

/**
 * Checks to see if a given order type already exists.
 *
 * @param string $type
 *   The string to match against existing types.
 *
 * @return bool
 *   TRUE or FALSE indicating whether or not the order type exists.
 */
function commerce_order_types_order_type_unique($type) {
  // Look for a match of the type.
  if ($match_id = db_query('SELECT type FROM {commerce_order_types_order_types} WHERE type = :type', array(':type' => $type))->fetchField()) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Save an order type.
 *
 * @param array $order_type
 *   The order type to be saved.
 */
function commerce_order_types_commerce_order_type_save($order_type, $skip_reset = FALSE) {
  $op = drupal_write_record('commerce_order_types_order_types', $order_type, empty($order_type['is_new']) ? 'type' : array());

  // If this is a new type and the insert did not fail...
  if (!empty($order_type['is_new']) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('commerce_order', $order_type['type']);
  }
  // Rebuild the menu to get add this type's order add menu items.
  if (!$skip_reset) {
    menu_rebuild();
  }

  variable_set('menu_rebuild_needed', TRUE);

  return $op;
}

/**
 * Loads an order type.
 *
 * @param string $type
 *   The machine-readable name of the order type; accepts normal machine names
 *     and URL prepared machine names with underscores replaced by hyphens.
 */
function commerce_order_types_order_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $order_types = commerce_order_types_order_types();
  return !empty($order_types[$type]) ? $order_types[$type] : FALSE;
}

/**
 * Returns an array of commerce order types as defined by this module.
 */
function commerce_order_types_order_types($reset = FALSE) {
  $order_types = &drupal_static(__FUNCTION__);


  if (!isset($order_types) || $reset) {
    $order_types = db_query('SELECT * FROM {commerce_order_types_order_types}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
    foreach ($order_types as $type => $order_type) {
      $order_types[$type]['module'] = 'commerce_order_types';
    }
  }
  return $order_types;
}

/**
 * Deletes an order type.
 *
 * @param string $type
 *   The machine-readable name of the order type.
 * @param bool $skip_reset
 *   Boolean indicating whether or not this delete should result in order
 *     types being reset and the menu being rebuilt; defaults to FALSE. This is
 *     useful when you intend to perform many saves at once, as menu rebuilding
 *     is very costly in terms of performance.
 */
function commerce_order_types_order_type_delete($type, $skip_reset = FALSE) {
  $order_type = commerce_order_types_order_type_load($type);

  db_delete('commerce_order_types_order_types')
    ->condition('type', $type)
    ->execute();

  // Rebuild the menu to get rid of this type's order add menu item.
  if (!$skip_reset) {
    menu_rebuild();
  }

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle('commerce_order', $type);
}

/**
 * Build an array of order types.
 */
function commerce_order_types_options_list() {
  $types = array();

  foreach (commerce_order_types_order_types() as $type => $order_type) {
    $types[$type] = $order_type['name'];
  }

  return $types;
}
